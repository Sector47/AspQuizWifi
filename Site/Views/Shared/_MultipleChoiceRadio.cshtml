@{
    // shuffled list of the provided answer list.
    // Put our list of answers into a strongly typed list
    List<int> tempList = Model.ans_IDList;
    List<string> tempDescriptionList = Model.descriptionList;
    // Create our random object and our list object to hold our ordered answers
    Random random = new Random();
    List<int> orderedAnswers = new List<int>();
    List<string> orderedDescriptions = new List<string>();

    // Order our list randomly matching each other.
    // To do this we join our lists (Zip) and then after we are done randomizing the order we split them again.
    // zip our lists together
    var zippedLists = tempList.Zip(tempDescriptionList, (tempListItem, tempDescriptionListItem) => new { tempListItem, tempDescriptionListItem });

    // randomized the zipped lists
    var randomizedZippedLists = zippedLists.OrderBy(x => random.Next()).ToList();

    orderedAnswers = randomizedZippedLists.Select(listItem => listItem.tempListItem).ToList();
    orderedDescriptions = randomizedZippedLists.Select(listItem => listItem.tempDescriptionListItem).ToList();
}
<div>
    <div class="question">@Model.que_question</div>
    <div class="answer">
        @for (int i = 0; i < orderedAnswers.Count; i++)
        {
            <div>
                <!--Convert.ToChar(i + 65) converts the numeric value to an alphabetic value. ToChar(1 + 65) == a - for the value we want to start at 1 so we add 66-->
                <label>
                    <input type="radio" name="@Model.que_ID" id="@orderedAnswers[i]" value="@Convert.ToChar(tempList.IndexOf(orderedAnswers[i]) + 65)" required/>
                    @Convert.ToChar(i + 65)) @orderedDescriptions[i]
                </label>
            </div>
        }
    </div>
</div>

